var searchIndex = {};
searchIndex["bitwise"] = {"doc":"Bitwise manipulation algorithms for `Word`s and sequences of `Words`.","items":[[8,"Word","bitwise","Bitwise manipulation algorithms for `Word`s.",null,null],[16,"Signed","","Signed Word Type of the same size as Self.",0,null],[16,"Unsigned","","Unsigned Word Type of the same size as Self.",0,null],[10,"size","","Size of the word in bytes.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bit_size","","Size of the word in bits.",0,{"inputs":[],"output":{"name":"usize"}}],[10,"to_unsigned","","Transmutes the integer into an unsigned integer of the\nsame size (bitwise loss-less).",0,{"inputs":[{"name":"word"}],"output":{"name":"unsigned"}}],[10,"to_signed","","Transmutes an integer into a signed integer of the\nsame size (bitwise loss-less).",0,{"inputs":[{"name":"word"}],"output":{"name":"signed"}}],[10,"zero","","Returns a word with no bits set (an integer of value zero).",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Returns a word with the least significant bit set (an integer of value one).",0,{"inputs":[],"output":{"name":"self"}}],[10,"two","","Returns a word with the second least significant bit set (an integer of value two).",0,{"inputs":[],"output":{"name":"self"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[11,"leading_ones","","Returns the number of leading ones in the binary representation\nof `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[11,"trailing_ones","","Returns the number of trailing ones in the binary representation\nof `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[10,"shift_logical_left","","Shift the bits to the left by a specified amount, `n`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"shift_logical_right","","Shift the bits to the right by a specified amount, `n`, with the\nhigh-order bits of the result cleared.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"shift_arithmetic_left","","Shift the bits to the left by a specified amount, `n` (same as\n[`shift_logical_left`](tymethod.shift_logical_left), provided for\nsymmetry).",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"shift_arithmetic_right","","Shift the bits to the right by a specified amount, `n`, setting the\nhigh-order bits of the result to the value of the most significant bit\nof `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"and_not","","Logical and not of `self` with `y`.",0,{"inputs":[{"name":"word"},{"name":"self"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"parity","","Returns the number of 1 bits in `self` mod 2, that is, returns 1 if the\nnumber of 1 bits in `self` is odd, and zero otherwise",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[11,"next_abs_greater_even","","Returns the next &quot;absolute&quot; even even number x such that `|self| &lt; |x| and\nsign(self) == sign(x)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"prev_abs_smaller_even","","Returns the previous &quot;absolute&quot; even number x such that `|x| &lt; |self| and\nsign(x) == sign(self)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"next_abs_greater_equal_even","","Returns the next &quot;absolute&quot; even number x such that `|self| &lt;= |x| and\nsign(self) == sign(x)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"prev_abs_smaller_equal_even","","Returns the previous &quot;absolute&quot; even number x such that `|x| &lt;= |self| and\nsign(x) == sign(self)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"next_abs_greater_odd","","Returns the next &quot;absolute&quot; odd number x such that `|self| &lt; |x| and\nsign(self) == sign(x)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"prev_abs_smaller_odd","","Returns the previous &quot;absolute&quot; odd number x such that `|x| &lt; |self| and\nsign(x) == sign(self)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"next_abs_greater_equal_odd","","Returns the next &quot;absolute&quot; odd odd number x such that `|self| &lt;= |x| and\nsign(self) == sign(x)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"prev_abs_smaller_equal_odd","","Returns the previous &quot;absolute&quot; odd number x such that `|x| &lt;= |self| and\nsign(x) == sign(self)`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"clear","","Clear all bits of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"clear_least_significant_one","","Clear least significant 1 bit of `self`; returns 0 if `self` is 0.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"set_least_significant_zero","","Set least significant 0 bit of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"isolate_least_significant_one","","Isolate least significant 1 bit of `self` and returns it; returns 0\nif `self` is 0.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"isolate_least_significant_zero","","Set the least significant zero bit of `self` to 1 and all of the\nrest to 0.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"clear_trailing_ones","","Clear the trailing 1&#39;s in `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"set_trailing_zeros","","Set all of the trailing 0&#39;s in `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"mask_trailing_zeros","","Returns a mask with all of the trailing 0&#39;s of `self` set.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"mask_trailing_ones","","Returns a mask with all of the trailing 1&#39;s of `self` set.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"mask_trailing_zeros_and_least_significant_one","","Returns a mask with all of the trailing 0&#39;s of `self` set and the least\nsignificant 1 bit set.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"mask_trailing_ones_and_least_significant_zero","","Returns a mask with all of the trailing 1&#39;s of `self` set and the least\nsignificant 0 bit set.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"first_bit_set","","Returns the position of the first bit that is set (starting from the\nlow-order bits).",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[11,"first_bit_clear","","Returns the position of the first bit that is set (starting from the\nlow-order bits).",0,{"inputs":[{"name":"word"}],"output":{"name":"usize"}}],[10,"reverse_bit_groups","","Reverses the bits of `self` by `subword_bits` and `group_subwords`:",0,{"inputs":[{"name":"word"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"reverse_bits","","Reverses the bits of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"reverse_bit_pairs","","Reverses the pairs of bits of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"reverse_bit_nibbles","","Reverses the nibbles of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"reverse_byte_groups","","Reverses the bytes of `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"reverse_bytes","","Reverses the bytes of `self` (equivalent to swap bytes).",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"set_bit","","Sets the `bit` of `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"set_bit_to","","Sets the `bit` of `self` to `value`.",0,{"inputs":[{"name":"word"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clear_bit","","Clears the `bit` of `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"flip_bit","","Flip the `bit` of `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"test_bit","","Test the `bit` of `self`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"clear_bits_geq","","Clears all bits of `self` at position &gt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"clear_bits_leq","","Clears all bits of `self` at position &lt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_bits_geq","","Sets all bits of `self` at position &gt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"set_bits_leq","","Sets all bits of `self` at position &lt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"flip_bits_geq","","Flip all bits of `self` at position &gt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"flip_bits_leq","","Flip all bits of `self` at position &lt;= `bit`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[11,"is_pow2","","Is `self` a power of 2.",0,{"inputs":[{"name":"word"}],"output":{"name":"bool"}}],[11,"ceil_pow2","","Round `self` to the next power of 2.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"floor_pow2","","Round `self` to the previous power of 2.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"average_floor","","Average without overflow (rounds to the smallest value).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"average_ceil","","Average without overflow (rounds to the largest value).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"is_aligned","","Is `self` aligned to `alignment` bytes.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"align_up","","Align `self` up to `alignment`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"align_down","","Align `self` down to `alignment`.",0,{"inputs":[{"name":"word"},{"name":"u32"}],"output":{"name":"self"}}],[10,"outer_perfect_shuffle","","Outer Perfect Shuffle of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[10,"outer_perfect_unshuffle","","Outer Perfect Unshuffle of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"inner_perfect_shuffle","","Inner Perfect Shuffle of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[11,"inner_perfect_unshuffle","","Inner Perfect Unshuffle of `self`.",0,{"inputs":[{"name":"word"}],"output":{"name":"self"}}],[10,"scatter_bits","","Scatter the low-ordr bits of self into the positions of the result selected\nby the `mask`.",0,{"inputs":[{"name":"word"},{"name":"self"}],"output":{"name":"self"}}],[10,"gather_bits","","Gather the bits of `self` selected by the `mask` into the low-order bits of\nthe result.",0,{"inputs":[{"name":"word"},{"name":"self"}],"output":{"name":"self"}}],[10,"gather_bit_range","","Gathers the contiguous low-order bits of `self` in range `[first,\nfirst+length]` into the low-order bits of the result.",0,{"inputs":[{"name":"word"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[10,"morton_encode_2d","","Encode coordinates `x` into an interleaved Morton index for a Z-Curve.",0,null],[10,"morton_encode_3d","","Encode coordinates `x` into an interleaved Morton index for a Z-Curve.",0,null],[10,"morton_decode_2d","","Decode interleaved Morton index for a Z-Curve into coordinates.",0,null],[10,"morton_decode_3d","","Decode interleaved Morton index for a Z-Curve into coordinates.",0,null],[8,"Words","","Bitwise manimpulation algorithms for sequences of `Words`.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",1,{"inputs":[{"name":"words"}],"output":{"name":"usize"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",1,{"inputs":[{"name":"words"}],"output":{"name":"usize"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of\n`self`.",1,{"inputs":[{"name":"words"}],"output":{"name":"usize"}}],[10,"size","","Size of the word sequence.",1,{"inputs":[{"name":"words"}],"output":{"name":"usize"}}]],"paths":[[8,"Word"],[8,"Words"]]};
initSearch(searchIndex);
